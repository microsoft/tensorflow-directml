parameters:
- name: artifact
  type: string
  default: ''
- name: enableTests
  type: boolean
  default: true
- name: buildCApi
  type: boolean
  default: false
- name: releaseBuild
  type: boolean
  default: false

jobs:
- job:
  displayName: Build ${{parameters.artifact}}
  timeoutInMinutes: 200
  workspace:
    clean: all
  ${{if contains(parameters.artifact, '-linux-') }}:
    pool: DirectML_TFLinux_Pool
  ${{if contains(parameters.artifact, '-win-') }}:
    pool: DirectML_TFWindows_Pool
  variables:
    buildOutPath: $(Build.StagingDirectory)/build_out
    buildPubPath: $(Build.StagingDirectory)/build_pub
  steps:
  - powershell: |
      $StartTicks = (Get-Date).Ticks
      Write-Host "Start Time = '$StartTicks' $([datetime]$StartTicks)"
      Write-Host "##vso[task.setVariable variable=startTicks;isOutput=true]$StartTicks"

      if ('${{parameters.artifact}}' -match '(x64-win|x64-linux)-(release|debug)-(cp\d\d)')
      {
          $Architecture, $Configuration, $PyVersion = $Matches[1..3]
          Write-Host "Architecture = '$Architecture'"
          Write-Host "##vso[task.setVariable variable=architecture;isOutput=true]$Architecture"

          Write-Host "Configuration = '$Configuration'"
          Write-Host "##vso[task.setVariable variable=configuration;isOutput=true]$Configuration"
          
          Write-Host "PyVersion = '$PyVersion'"
          Write-Host "##vso[task.setVariable variable=pyVersion;isOutput=true]$PyVersion"
          
          $PyVersionMajorDotMinor = $PyVersion[2] + '.' + $PyVersion[3]
          Write-Host "PyVersionMajorDotMinor = '$PyVersionMajorDotMinor'"
          Write-Host "##vso[task.setVariable variable=pyVersionMajorDotMinor;isOutput=true]$PyVersionMajorDotMinor"
      }
      else
      {
          throw "Could not parse build artifact: '${{parameters.artifact}}'"
      }
    name: vars
    displayName: Initialize Variables

  - ${{if contains(parameters.artifact, '-linux-') }}:
    - script: |
        wget https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh
        bash bazel-0.24.1-installer-linux-x86_64.sh --bin=$(Build.StagingDirectory)/bazel/0.24.1 --base=$(Build.StagingDirectory)/.bazel
      displayName: Install Bazel
      workingDirectory: $(Build.StagingDirectory)
    - script: |
        echo "##vso[task.prependpath]$(Build.StagingDirectory)/bazel/0.24.1"
      displayName: Set Bazel Path
      workingDirectory: $(Build.StagingDirectory)
      target: manylinux
    - script: |
        ls /opt/python/$(vars.pyVersion)-$(vars.pyVersion)m/bin/python
        alias pip=/opt/python/$(vars.pyVersion)-$(vars.pyVersion)m/bin/python
        which pip
        pip install six numpy wheel
        pip install keras_applications==1.0.6 --no-deps
        pip install keras_preprocessing==1.0.5 --no-deps
      displayName: Install Python Packages
      workingDirectory: $(Build.StagingDirectory)
      target: manylinux
  
  - ${{if contains(parameters.artifact, '-win-') }}:
    - powershell: |
        $Url = 'https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe'
        $DownloadPath = '$(Build.StagingDirectory)/msys2.exe'
        (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
        & "$DownloadPath" -y
        & "msys64/usr/bin/bash" -lc ' '
        & "msys64/usr/bin/pacman.exe" --sync --needed --noconfirm git patch unzip
        Write-Host "##vso[task.prependpath]$(Build.StagingDirectory)/msys64/usr/bin"
      displayName: Install MSYS2
      workingDirectory: $(Build.StagingDirectory)
    - powershell: |
        $Url = 'https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-windows-x86_64.exe'
        $DownloadPath = '$(Build.StagingDirectory)/bin/bazel.exe'
        $InstallDir = Split-Path $DownloadPath -Parent
        New-Item -Force -ItemType Directory $InstallDir
        (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
        Write-Host "##vso[task.prependpath]$InstallDir"
        Write-Host "##vso[task.setVariable variable=vs;isOutput=true]C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise"
      displayName: Install Bazel
      name: bazel # sets the prefix for variables: the 'vs' variable maps to 'BAZEL_VS' environment variable for future tasks
      workingDirectory: $(Build.StagingDirectory)
    - powershell: |
        $Url = 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe'
        $DownloadPath = '$(Build.StagingDirectory)/miniconda.exe'
        (New-Object System.Net.WebClient).DownloadFile($Url, $DownloadPath)
        $InstallDir = '$(Build.StagingDirectory)\miniconda3'
        Start-Process $DownloadPath -ArgumentList '/NoRegistry=1', '/InstallationType=JustMe', '/RegisterPython=0', '/S', "/D=$InstallDir" -Wait
        & "$InstallDir/shell/condabin/conda-hook.ps1"
        conda create --name build python=$(vars.pyVersionMajorDotMinor) -y
        $ActivateCmd = "$InstallDir/shell/condabin/conda-hook.ps1; conda activate build"
        Write-Host "##vso[task.setVariable variable=activateCommand;isOutput=true]$ActivateCmd"
      displayName: Install Miniconda
      name: miniconda
      workingDirectory: $(Build.StagingDirectory)
    - powershell: |
        Invoke-Expression '$(miniconda.activateCommand)'
        pip install six numpy wheel
        pip install keras_applications==1.0.6 --no-deps
        pip install keras_preprocessing==1.0.5 --no-deps
      displayName: Install Python Packages

  # Appends ".dev<DATE>" to the _VERSION variable in setup.py. For example, if the pipeline version
  # is 200610-2233.1.master, and _VERSION is currently 1.15.2, then the updated version will be
  # 1.15.2.dev200610. If the "Release Build" parameter is set then the .dev suffix is removed entirely.
  - powershell: |
      $SetupPyPath = "$(Build.SourcesDirectory)/tensorflow/tools/pip_package/setup.py"
      if ("${{parameters.releaseBuild}}" -eq "True") {
          $SubstituteVersion = "_VERSION = '`$1'"
      } else {
          $DevVersion = "$(Build.BuildNumber)" -replace '(\d{6}).*','$1'
          $SubstituteVersion = "_VERSION = '`$1.dev$DevVersion'"
      }
      $SetupPy = (Get-Content $SetupPyPath -Raw) -replace "_VERSION = '(\d+\.\d+\.\d+).*'", $SubstituteVersion
      Set-Content $SetupPyPath $SetupPy -Encoding ascii
    displayName: Set Build Version

  - ${{if contains(parameters.artifact, '-linux-') }}:
    - script: |
        alias python=/opt/python/$(vars.pyVersion)-$(vars.pyVersion)m/bin/python
        if [ "${{parameters.enableTests}}" == "True" ]; then
            python build.py --clean --package --tests --config $(vars.configuration) --build_output $(buildOutPath) --telemetry
            python third_party/dml/ci/gather_test_binaries.py --source_root . --build_output $(buildOutPath) --destination $(buildPubPath)/tests/test_binaries
        else
            python build.py --clean --package --config $(vars.configuration) --build_output $(buildOutPath) --telemetry
        fi

        if [ "${{parameters.buildCApi}}" == "True"]; then
            python build.py --config $(vars.configuration) --build_output $(buildOutPath) --target //tensorflow/tools/lib_package:libtensorflow --c_package --telemetry
        fi
      displayName: Build
      target: manylinux
  - ${{if contains(parameters.artifact, '-win-') }}:
    - powershell: |
        Invoke-Expression '$(miniconda.activateCommand)'
        if ("${{parameters.enableTests}}" -eq "True") {
            python build.py --clean --package --tests --config $(vars.configuration) --build_output $(buildOutPath) --telemetry
            python third_party/dml/ci/gather_test_binaries.py --source_root . --build_output $(buildOutPath) --destination $(buildPubPath)/tests/test_binaries
        } else {
            python build.py --clean --package --config $(vars.configuration) --build_output $(buildOutPath) --telemetry
        }

        if ("${{parameters.buildCApi}}" -eq "True") {
            python build.py --config $(vars.configuration) --build_output $(buildOutPath) --target //tensorflow/tools/lib_package:libtensorflow --c_package --telemetry
        }
      displayName: Build

  - powershell: |
      New-Item -Force -ItemType Directory "$(buildPubPath)"
      Copy-Item -Recurse "$(buildOutPath)/python_package/*" "$(buildPubPath)"
      if ("${{parameters.enableTests}}" -eq "True") {
          Copy-Item -Recurse -Force "$(Build.SourcesDirectory)/third_party/dml/ci/*" "$(buildPubPath)" -Verbose
      }
      if ("${{parameters.buildCApi}}" -eq "True") {
          Copy-Item -Recurse "$(buildOutPath)/c_package/*" "$(buildPubPath)" -Verbose
      }
    displayName: Stage Artifacts

  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      PathtoPublish: $(buildPubPath)
      ArtifactName: ${{parameters.artifact}}

  - powershell: |
      $Duration = ((Get-Date) - [datetime]$(vars.startTicks)).ToString("c")
      [ordered]@{agentName = $env:AGENT_NAME; status = $env:AGENT_JOBSTATUS; duration = $Duration} | 
        ConvertTo-Json | 
        Out-File $(Build.StagingDirectory)/${{parameters.artifact}}.json
      cat $(Build.StagingDirectory)/${{parameters.artifact}}.json
    displayName: Gather Agent Info
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: Publish Agent Info
    condition: always()
    inputs:
      PathtoPublish: $(Build.StagingDirectory)/${{parameters.artifact}}.json
      ArtifactName: build