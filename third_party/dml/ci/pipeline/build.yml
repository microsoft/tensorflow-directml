parameters:
- name: artifact
  type: string
  default: ''
- name: enableTests
  type: boolean
  default: true
- name: buildCApi
  type: boolean
  default: false

jobs:
- job:
  displayName: Build ${{parameters.artifact}}
  timeoutInMinutes: 120
  workspace:
    clean: all
  ${{if contains(parameters.artifact, '-linux-') }}:
    pool:
      vmImage: ubuntu-18.04
  ${{if contains(parameters.artifact, '-win-') }}:
    pool: DirectML_BuildPool
  variables:
    buildOutPath: $(Build.StagingDirectory)/build_out
    buildPubPath: $(Build.StagingDirectory)/build_pub
  steps:
  - powershell: |
      $StartTicks = (Get-Date).Ticks
      Write-Host "Start Time = '$StartTicks' $([datetime]$StartTicks)"
      Write-Host "##vso[task.setVariable variable=startTicks;isOutput=true]$StartTicks"

      if ('${{parameters.artifact}}' -match '(x64-win|x64-linux)-(release|debug)-(cp\d\d)')
      {
          $Architecture, $Configuration, $PyVersion = $Matches[1..3]
          Write-Host "Architecture = '$Architecture'"
          Write-Host "##vso[task.setVariable variable=architecture;isOutput=true]$Architecture"

          Write-Host "Configuration = '$Configuration'"
          Write-Host "##vso[task.setVariable variable=configuration;isOutput=true]$Configuration"
          
          Write-Host "PyVersion = '$PyVersion'"
          Write-Host "##vso[task.setVariable variable=pyVersion;isOutput=true]$PyVersion"
          
          $PyVersionMajorDotMinor = $PyVersion[2] + '.' + $PyVersion[3]
          Write-Host "PyVersionMajorDotMinor = '$PyVersionMajorDotMinor'"
          Write-Host "##vso[task.setVariable variable=pyVersionMajorDotMinor;isOutput=true]$PyVersionMajorDotMinor"
      }
      else
      {
          throw "Could not parse build artifact: '${{parameters.artifact}}'"
      }
    name: vars
    displayName: Initialize Variables

  - ${{if contains(parameters.artifact, '-linux-') }}:
    - template: setup_agent_linux.yml
  - ${{if contains(parameters.artifact, '-win-') }}:
    - template: setup_agent_windows.yml

  - powershell: |
      if ("${{parameters.enableTests}}" -eq "True") {
          python build.py --clean --package --tests --config $(vars.Configuration) --build_output $(TfArtifactsPathWin) --telemetry
      } else {
          python build.py --clean --package --config $(vars.Configuration) --build_output $(TfArtifactsPathWin) --telemetry
      }

      if ("${{parameters.buildCApi}}" -eq "True") {
          python build.py --config $(vars.Configuration) --build_output $(TfArtifactsPathWin) --target //tensorflow/tools/lib_package:libtensorflow --telemetry
      }
    displayName: Build

  - ${{if parameters.enableTests}}:
    - script: |
        python third_party/dml/ci/gather_test_binaries.py --source_root . --build_output $(buildOutPath) --destination $(Build.StagingDirectory)/artifacts/tests/test_binaries
      displayName: Gather Test Binaries

  - powershell: |
      New-Item -Force -ItemType Directory "$(buildPubPath)"
      Copy-Item -Recurse "$(buildOutPath)/python_package" "$(buildPubPath)"
      if ("${{parameters.enableTests}}" -eq "True") {
          Copy-Item -Recurse "$(Build.SourcesDirectory)/third_party/dml/ci" "$(buildPubPath)"
      }
      if ("${{parameters.buildCApi}}" -eq "True") {
          Copy-Item -Recurse "$(TfSourcePathWin)/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz" "$(buildPubPath)" -Verbose
      }
    displayName: Stage Artifacts

  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      PathtoPublish: $(buildPubPath)
      ArtifactName: ${{parameters.artifact}}

  - powershell: |
      $Duration = ((Get-Date) - [datetime]$(vars.startTicks)).ToString("c")
      [ordered]@{agentName = $env:AGENT_NAME; status = $env:AGENT_JOBSTATUS; duration = $Duration} | 
        ConvertTo-Json | 
        Out-File $(Build.StagingDirectory)/info.json
      cat $(Build.StagingDirectory)/info.json
    displayName: Gather Agent Info
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: Publish Agent Info
    condition: always()
    inputs:
      PathtoPublish: $(Build.StagingDirectory)/info.json
      ArtifactName: build