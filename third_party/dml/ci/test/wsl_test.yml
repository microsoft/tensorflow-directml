# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# Standalone test pass for WSL that is reported separately. Instead of testing a specific build, this pipeline
# tests that most recent successful build. This should be consolidated with the nightly test pass.

# The following variables are set in the pipeline web UI:
# - (required) AgentPool : name of the ADO agent pool to test.
# - (required) TestGroups : comma-separated list of test groups to test. e.g. 'python,core'
# - (required) Artifacts : comma-separated list of build artifacts to test. e.g. 'x64-win-release-cp36'
# - (required) ArtifactsBranch : branch to fetch the build artifacts from. e.g. 'directml'
# - (optional) EmailTo : email address to receive generated HTML report. If empty, no email is sent.

name: $(Date:yyMMdd-HHmm)$(Rev:.r).$(SourceBranchName).wsl

# Run at 11 AM UTC every night (4 AM PDT)
trigger: none
schedules:
- cron: "0 11 * * *"
  displayName: Nightly WSL Run
  branches:
    include:
    - master
  always: false

variables:
  skipComponentGovernanceDetection: true

jobs:
- job: test
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 1
  pool:
    name: $(AgentPool)
  steps:
  
  - task: PowerShell@2
    displayName: Run Tests
    inputs:
      targetType: filePath
      filePath: third_party/dml/ci/test/TestStandaloneAgent.ps1
      arguments: >
        -AccessToken "$(System.AccessToken)"
        -ArtifactDirectory "$(System.ArtifactsDirectory)"
        -TestGroups "$(TestGroups)"
        -TestArtifacts "$(Artifacts)"
        -TestArtifactsBranch "$(ArtifactsBranch)"

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: XUnit
      testResultsFiles: test_summary.xml
      searchFolder: $(System.ArtifactsDirectory)/test_results
      mergeTestResults: true
      testRunTitle: 'wsl_test.$(Build.BuildNumber)'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: Upload Test Results
    continueOnError: true
    inputs:
      pathToPublish: $(System.ArtifactsDirectory)/test_results
      artifactName: test_results

  - task: PowerShell@2
    displayName: Create Test Email
    condition: succeededOrFailed()
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      targetType: filePath
      filePath: third_party/dml/ci/test/CreateTestEmail.ps1
      arguments: >
        -TestArtifactsPath '$(System.ArtifactsDirectory)/test_results'
        -BuildArtifacts $(Artifacts)
        -TestGroups $(TestGroups)
        -BuildRunID $(SrcBuildID) 
        -TestRunID $(Build.BuildId)
        -AccessToken $(System.AccessToken)
        -EmailTo $(EmailTo)
